# -*- coding: utf-8 -*-
"""Zda20240313 (AX).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F8t2rqTq6kR9kzAqKUa1H_EFLamk-Z4E
"""

def caesar_cipher(text, key):
    # Defining the alphabet
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    encrypted_text = ''

    # Encryption of each character in the text
    for char in text:
        if char in alphabet:
            # Getting the index of the character in the alphabet
            idx = alphabet.index(char)
            # Appling the Caesar cipher shift
            encrypted_idx = (idx + key) % len(alphabet)
            # Appending the encrypted character to the result
            encrypted_text += alphabet[encrypted_idx]
        else:
            # If the character is not in the alphabet, leaving it unchanged
            encrypted_text += char

    return encrypted_text

# Function to get user input for the key
def get_key():
    while True:
        try:
            key = int(input("Enter the key for the Caesar cipher (an integer): "))
            return key
        except ValueError:
            print("Invalid input. Please enter an integer.")

def main():
    input_text = input("Enter the text to encrypt: ")
    key = get_key()

    encrypted_text = caesar_cipher(input_text, key)
    print("Encrypted text:", encrypted_text)

    decrypt_choice = input("Do you want to decrypt the text? (yes/no): ")
    if decrypt_choice.lower() == "yes":
        decrypted_text = caesar_cipher(encrypted_text, -key)
        print("Decrypted text:", decrypted_text)

if __name__ == "__main__":
    main()